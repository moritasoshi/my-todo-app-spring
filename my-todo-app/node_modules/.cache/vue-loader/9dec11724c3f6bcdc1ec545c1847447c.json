{"remainingRequest":"/Users/moritasoshi/Workspace/vue-workspace/my-todo-app/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/moritasoshi/Workspace/vue-workspace/my-todo-app/src/views/Board.vue?vue&type=style&index=0&id=bd346610&scoped=true&lang=css&","dependencies":[{"path":"/Users/moritasoshi/Workspace/vue-workspace/my-todo-app/src/views/Board.vue","mtime":1599819492140},{"path":"/Users/moritasoshi/Workspace/vue-workspace/my-todo-app/node_modules/css-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/moritasoshi/Workspace/vue-workspace/my-todo-app/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/Users/moritasoshi/Workspace/vue-workspace/my-todo-app/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/Users/moritasoshi/Workspace/vue-workspace/my-todo-app/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/moritasoshi/Workspace/vue-workspace/my-todo-app/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKLm15LWNhcmQgewogIG1hcmdpbjogMTBweCAwOwp9Cg=="},{"version":3,"sources":["Board.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAqQA;AACA;AACA","file":"Board.vue","sourceRoot":"src/views","sourcesContent":["<template>\n  <v-app>\n    <v-container class=\"d-flex\">\n      <h2>{{ board.board_name }}</h2>\n\n      <template>\n        <v-btn color=\"green lighten-2\" class=\"mx-5\" icon @click=\"showBoard()\">\n          <v-icon>mdi-pencil</v-icon>\n        </v-btn>\n      </template>\n      <v-spacer></v-spacer>\n    </v-container>\n\n    <!-- 既存ボード -->\n    <v-container class=\"d-flex\">\n      <v-card\n        width=\"230\"\n        class=\"mx-1\"\n        v-for=\"(tile, index) in board.tiles\"\n        :key=\"index\"\n      >\n        <v-app-bar dark color=\"grey\" dense>\n          <v-toolbar-title>{{ tile.name }}</v-toolbar-title>\n          <v-spacer></v-spacer>\n          <template>\n            <v-btn\n              color=\"white\"\n              class=\"ma-2\"\n              icon\n              @click=\"\n                showTile({\n                  tileId: tile.id,\n                  tileName: tile.name,\n                })\n              \"\n            >\n              <v-icon>mdi-pencil</v-icon>\n            </v-btn>\n          </template>\n        </v-app-bar>\n        <v-container>\n          <draggable group=\"all-tasks\" :list=\"tile.cards\">\n            <v-card\n              v-for=\"(card, i) in tile.cards\"\n              :key=\"i\"\n              width=\"220\"\n              hover\n              class=\"d-flex my-card\"\n            >\n              <v-card-text color=\"black\" v-text=\"card.name\"></v-card-text>\n              <v-card-actions>\n                <template>\n                  <v-btn\n                    color=\"green lighten-2\"\n                    class=\"ma-2\"\n                    icon\n                    @click=\"\n                      showCard({\n                        cardId: card.id,\n                        cardName: card.name,\n                        tileName: tile.name,\n                      })\n                    \"\n                  >\n                    <v-icon>mdi-pencil</v-icon>\n                  </v-btn>\n                </template>\n                <v-btn icon>\n                  <v-icon>mdi-delete</v-icon>\n                </v-btn>\n              </v-card-actions>\n            </v-card>\n          </draggable>\n          <v-btn @click=\"addCard(tile.name)\">Add</v-btn>\n        </v-container>\n      </v-card>\n\n      <!-- ボード追加 -->\n      <v-text-field\n        @keydown.enter=\"addTile\"\n        v-model=\"newTile.name\"\n        label=\"+ リストを追加\"\n        outlined\n        required\n        color=\"green\"\n        class=\"shrink\"\n      ></v-text-field>\n    </v-container>\n\n    <!-- トランジション関連 -->\n    <!-- ボード名変更 -->\n    <v-container v-show=\"boardShow\">\n      <v-text-field\n        label=\"ボード名を入力\"\n        color=\"grey\"\n        v-model=\"targetBoardName\"\n      ></v-text-field>\n      <v-btn color=\"green lighten-2\" dark class=\"ml-2\" @click=\"editBoard\"\n        >ボード名を変更</v-btn\n      >\n    </v-container>\n    <!-- リスト名変更 -->\n    <v-container v-show=\"tileShow\">\n      <v-text-field\n        label=\"リスト名を入力\"\n        color=\"grey\"\n        v-model=\"targetTile.name\"\n      ></v-text-field>\n      <v-btn color=\"green lighten-2\" dark class=\"ml-2\" @click=\"editTile\"\n        >リスト名を変更</v-btn\n      >\n    </v-container>\n    <!-- カード名変更 -->\n    <v-container v-show=\"cardShow\">\n      <v-text-field\n        label=\"カード名を入力\"\n        color=\"grey\"\n        v-model=\"targetCard.name\"\n      ></v-text-field>\n      <v-btn color=\"green lighten-2\" dark class=\"ml-2\" @click=\"editCard\"\n        >カード名を変更</v-btn\n      >\n    </v-container>\n  </v-app>\n</template>\n\n<script>\nimport Draggable from \"vuedraggable\";\nimport { mapActions } from \"vuex\";\n\nexport default {\n  components: {\n    Draggable,\n  },\n  data() {\n    return {\n      tileShow: false,\n      boardShow: false,\n      cardShow: false,\n      targetBoardName: \"\",\n      targetTile: {\n        id: \"\",\n        name: \"\",\n      },\n      targetCard: {\n        id: \"\",\n        name: \"\",\n        tileName: \"\",\n      },\n\n      board: {},\n      newTile: {\n        name: null,\n        cards: [],\n      },\n      newCard: {\n        name: \"new card\",\n      },\n    };\n  },\n  props: {\n    slug: {\n      type: String,\n      required: true,\n    },\n  },\n  created() {\n    this.board = this.$store.state.boards.find(\n      (board) => board.board_name === this.slug\n    );\n  },\n  watch: {\n    \"board.tiles\": {\n      handler: function() {\n        this.$store.dispatch(\"updateBoard\", this.board);\n      },\n      deep: true,\n    },\n  },\n  methods: {\n    showBoard() {\n      this.boardShow = !this.boardShow;\n    },\n    showTile({ tileId, tileName }) {\n      this.tileShow = !this.tileShow;\n      this.targetTile.id = tileId;\n      this.targetTile.name = tileName;\n    },\n    showCard({ cardId, cardName, tileName }) {\n      this.cardShow = !this.cardShow;\n      this.targetCard.id = cardId;\n      this.targetCard.name = cardName;\n      this.targetCard.tileName = tileName;\n    },\n    editBoard() {\n      this.board.board_name = this.targetBoardName;\n      this.updateBoard(this.board);\n      this.$router.push({\n        name: \"board\",\n        params: { slug: this.targetBoardName },\n      });\n      this.targetBoardName = \"\";\n      this.boardShow = false;\n    },\n    editTile() {\n      this.board.tiles.find(\n        (tile) => tile.id === this.targetTile.id\n      ).name = this.targetTile.name;\n      this.updateBoard(this.board);\n      this.targetTile = {\n        id: \"\",\n        name: \"\",\n      };\n      this.tileShow = false;\n    },\n    editCard() {\n      this.board.tiles\n        .find((tile) => tile.name === this.targetCard.tileName)\n        .cards.find(\n          (card) => card.id === this.targetCard.id\n        ).name = this.targetCard.name;\n      this.updateBoard(this.board);\n      this.targetCard = {\n        id: \"\",\n        name: \"\",\n        tileName: \"\",\n      };\n      this.cardShow = false;\n    },\n    addCard(tileName) {\n      this.newCard.id = this.uuid();\n      this.board.tiles\n        .find((tile) => tile.name === tileName)\n        .cards.push(this.newCard);\n      this.newCard = {\n        name: \"new card\",\n      };\n      this.updateBoard(this.board);\n    },\n    addTile() {\n      this.newTile.id = this.uuid();\n      this.board.tiles.push(this.newTile);\n      this.updateBoard(this.board);\n      this.newTile = {\n        name: null,\n        cards: [],\n      };\n    },\n    uuid() {\n      return \"xxxxxxxxxxxxxxxxxx\".replace(/[xy]/g, (c) => {\n        var r = (Math.random() * 16) | 0,\n          v = c == \"x\" ? r : (r & 0x3) | 0x8;\n        return v.toString(16);\n      });\n    },\n    ...mapActions([\"updateBoard\"]),\n  },\n};\n</script>\n\n<style scoped>\n.my-card {\n  margin: 10px 0;\n}\n</style>\n"]}]}